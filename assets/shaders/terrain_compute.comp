#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 1) buffer VertexBuffer { vec3 vertices[]; };
layout(std430, binding = 2) buffer TexCoordBuffer { vec2 texCoords[]; };
layout(std430, binding = 3) buffer IndexBuffer { uint indices[]; };

uniform int width;
uniform int height;
uniform sampler2D heightMap;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= width || gid.y >= height) return;

    float heightValue = int(texture(heightMap, vec2(gid) / vec2(width - 1, height - 1)).r * 255);
    float yScale = 256.0f / 256.0f;
    float yShift = 16.0f;
    if(gid.x == 0 || gid.y == 0 || gid.x == width - 1 || gid.y == height - 1) {
        yScale = 0.0f;
        yShift = 0.0f;
    }
    float yy = heightValue * yScale - yShift;
    float xx = -height / 2.0f + gid.y;
    float zz = -width / 2.0f + gid.x;

    uint idx = gid.y * width + gid.x;
    vertices[idx] = vec3(xx, yy, zz);
    texCoords[idx] = vec2(float(gid.x) / float(width - 1), float(gid.y) / float(height - 1));

    if (gid.x < width && gid.y < height) {
        uint baseIdx = gid.y * width + gid.x;
        uint indicesIdx = 4096 * gid.y + 2 * gid.x;
        indices[indicesIdx] = baseIdx;
        indices[indicesIdx + 1] = baseIdx + width;
    }
}
